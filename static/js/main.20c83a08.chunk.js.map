{"version":3,"sources":["redux/reducers.js","components/card.js","components/cardList.js","components/searchbox.js","components/scroll.js","components/errorBoundary.js","components/countButton.js","components/header.js","components/MainPage.js","containers/App.js","redux/actoins.js","redux/constants.js","serviceWorker.js","index.js"],"names":["initialStateSearch","searchField","initialStateRobots","robots","isPending","Card","name","id","email","className","alt","src","CardList","console","log","map","robot","key","Searchbox","searchChange","type","placeholder","aria-label","onChange","Scroll","props","style","height","border","overflowY","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","CountButton","updateCount","count","updateCountTo3","color","onClick","PureComponent","Header","nextProps","nextState","MainPage","filterRobots","filter","toLowerCase","includes","onRequestRobots","onSearchChange","App","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","res","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.20c83a08.chunk.js","sourcesContent":["import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n   } from './constants';\n  \n  const initialStateSearch = {\n    searchField: ''\n  }\n  \n  export const searchRobots = (state=initialStateSearch, action={}) => {\n    switch (action.type) {\n      case CHANGE_SEARCH_FIELD:\n        return Object.assign({}, state, {searchField: action.payload})\n      default:\n        return state\n    }\n  }\n  \n  const initialStateRobots = {\n    robots: [],\n    isPending: true\n  }\n  \n  export const requestRobots = (state=initialStateRobots, action={}) => {\n    switch (action.type) {\n      case REQUEST_ROBOTS_PENDING:\n        return Object.assign({}, state, {isPending: true})\n      case REQUEST_ROBOTS_SUCCESS:\n        return Object.assign({}, state, {robots: action.payload, isPending: false})\n      case REQUEST_ROBOTS_FAILED:\n        return Object.assign({}, state, {error: action.payload})\n      default:\n        return state\n    }\n  }\n  ","import React from 'react'; // need to import to make it a jsx\n// remove the above line will throw error\n\n// https://robohash.org/ pretty cool robot image generator\nconst Card = ({name, id, email}) => {\n    return (\n        <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img alt='robots' src={`https://robohash.org/${id}?size=200x200`}/>\n            <div>{name}</div>\n            <div>{email}</div>\n            <div>more stuff coming</div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './card';\n\nconst CardList = ({robots}) => {\n    console.log('CardList')\n    return (\n        <div>\n            {robots.map( robot => \n                <Card key={robot.id} \n                    name={robot.name} \n                    id={robot.id} \n                    email={robot.email}\n                />    \n            )}\n        </div>\n    );\n};\n\nexport default CardList;","import React from 'react';\n\nconst Searchbox = ({searchChange}) => {\n    return (\n       <div className=\"pa2\">\n        <input className=\"pa3 ba b--green bg-lightest-blue\"\n            type='search'\n            placeholder='search robots'\n            aria-label='search robots'\n            onChange={searchChange}\n        />\n       </div>\n    );\n}\n\nexport default Searchbox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n       <div style={{height: '800px', border: '5px solid', overflowY: 'scroll'}}>\n           { props.children}\n       </div>\n    );\n};\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false,\n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({hasError: true});\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return <h1>Oooop. this is not good</h1>\n        }\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","import React, {PureComponent} from 'react';\n// use React PurComponent if only want to update when the props changed\n// use shouldUpdateComponent with causion for it might cause some unwanted logic\nclass CountButton extends PureComponent {\n    constructor(props) {\n        super(props);\n        this.state = {count: 0};\n    }\n\n    // shouldComponentUpdate(nextProps, nextState) {\n    //     if (this.state.count !== nextState.count) {\n    //         return true;\n    //     } else {return false}\n    // }\n\n    updateCount = () => {\n        // this.setState({count: this.state.count + 1});\n        // to handle async update state react use\n        this.setState(state => ({count: state.count + 1}))\n    };\n\n    updateCountTo3 = () => {\n        this.setState(state => ({count: 3}));\n    }\n\n    render() {\n        console.log('CountButton', this.props.color);\n        return (\n            <div>\n                <button color={this.props.color} id=\"counter\" className='f1' onClick={this.updateCount}>{this.state.count}</button>\n                <button className='f1' onClick={this.updateCountTo3}>update to 3</button>\n            </div>\n        );\n    }\n}\n\nexport default CountButton;","import React, {Component} from 'react';\n// use React PurComponent if only want to update when the props changed\n// use shouldUpdateComponent with causion for it might cause some unwanted logic\n\nimport CounterButton from './countButton';\nclass Header extends Component {\n\n    shouldComponentUpdate(nextProps, nextState) {\n        return true;\n    }\n\n    render() {\n        console.log('header');\n        return (\n            <div>\n                <h1 className='f1'>RoboFriends</h1>\n                <CounterButton color={'red'}/>\n            </div>\n        );\n    }\n}\n\nexport default Header;","import React, { Component } from 'react';\n\nimport CardList from './cardList'\nimport Searchbox from './searchbox';\nimport Scroll from './scroll';\nimport './MainPage.css';\nimport ErrorBoundary from './errorBoundary';\nimport Header from './header';\n\n\nclass MainPage extends Component {\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  filterRobots = (robots, searchField) =>\n    robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n\n  render() {\n    const { robots, searchField, onSearchChange, isPending } = this.props;\n    // const filteredRobots = robots.filter(robot => {\n    //   return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    // })\n    return (\n      <div className='tc'>\n        <Header />\n        <Searchbox searchChange={onSearchChange}/>\n        <Scroll>\n          { isPending ? <h1>Loading</h1> :\n            <ErrorBoundary>\n              <CardList robots={this.filterRobots(robots, searchField)} />\n            </ErrorBoundary>\n          }\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default MainPage;\n","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport {changeSearchField, requestRobots} from '../redux/actoins';\nimport MainPage from '../components/MainPage';\n\n\n// parameter state comes from index.js provider store state(rootReducers)\nconst mapStateToProps = (state) => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending\n  }\n}\n\n// dispatch the DOM changes to call an action. note mapStateToProps returns object, mapDispatchToProps returns function\n// the function returns an object then uses connect to change the data from redecers.\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(changeSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\nclass App extends Component {\n  render() {\n   \n   return (<MainPage  {...this.props}/>);\n  }\n}\n\n// action done from mapDispatchToProps will channge state from mapStateToProps\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n","import {\n        CHANGE_SEARCH_FIELD,\n        REQUEST_ROBOTS_FAILED,\n        REQUEST_ROBOTS_PENDING,\n        REQUEST_ROBOTS_SUCCESS\n    } from './constants';\n\nexport const changeSearchField = text => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n});\n\n// thunk middle work, for it (determine)/looking for the action return is a function\n// instead of object, when the middle determine it is a func, it will give the thunk\n\n// if wondering why the method has the dispatch argument inside\n// because of the thunk, it handles the dispatch (context)\n// similar to function(dispatch){ ///...} but thunk handle that... if wondering\nexport const requestRobots = () =>  (dispatch) => { // higher order function, function return another function\n    console.log('here before error???')\n    dispatch({ type: REQUEST_ROBOTS_PENDING});\n\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(res => res.json())\n        .then( data => {\n            dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data});\n        })\n        .catch(error => {\n            dispatch({type: REQUEST_ROBOTS_FAILED, payload: error});\n        })\n    };\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux'; // provider handle passing all store data into all children/ connect will connect and subscribe\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\n// import thunkMiddleware from 'react-thunk'; // react-thunk vs redux-thunk\nimport thunkMiddleware from 'redux-thunk'; // react-thunk vs redux-thunk\n// import {createLogger} from 'redux-logger';\nimport {searchRobots, requestRobots} from './redux/reducers'\n\n\nimport App from './containers/App';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\nconst rootReducer = combineReducers({requestRobots, searchRobots});\n\n// const logger = createLogger();\n// const store = createStore(searchRobots, applyMiddleware(logger)); // should be rootReducers (all reducers combine)\nconst store = \n    createStore(rootReducer, applyMiddleware(thunkMiddleware, /**logger*/)); // should be rootReducers (all reducers combine)\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, \n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}